// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash  String

  refreshTokens RefreshToken[]
  Course        Course[]

  @@map("users")
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  code  String
  email String @unique
  hash  String

  @@map("email_verifications")
}

model RefreshToken {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  os          String?
  browser     String?
  ip          String?
  device      String?
  vendor      String?
  ua          String?
  expiredDate DateTime?

  token String @unique

  @@map("user_refresh_tokens")
}

model Course {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  creator   User    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId Int
  public    Boolean @default(false)

  published Boolean @default(false)

  modules CourseModule[] @relation("CourseModules")

  @@map("course")
}

model CourseModule {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course @relation("CourseModules", fields: [courseId], references: [id], onDelete: Cascade)
  courseId Int

  lessons ModuleLesson[] @relation("ModuleLessons")

  order       Int
  name        String
  description String @default("")

  @@map("course_module")
}

model ModuleLesson {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  module   CourseModule @relation("ModuleLessons", fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId Int

  steps LessonStep[] @relation("LessonSteps")

  name  String
  order Int

  @@map("module_lesson")
}

model LessonStep {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lesson   ModuleLesson @relation("LessonSteps", fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId Int

  type    StepType
  content String
  test    Test?

  @@map("lesson_step")
}

model Test {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  step   LessonStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId Int        @unique

  answers TestAnswer[]

  @@map("test")
}

model TestAnswer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name    String
  isRight Boolean @default(false)

  test   Test @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId Int

  @@map("test_answer")
}

enum StepType {
  TEXT
  TEST
}
